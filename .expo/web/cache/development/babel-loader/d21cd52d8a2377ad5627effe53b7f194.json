{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ysh/Documents/Study/Nomad/get-weather/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Loading from \"./Loading\";\nimport * as Location from \"expo-location\";\nimport axios from \"axios\";\nimport Weather from \"./Weather\";\nvar API_KEY = \"f06fda6d39bbf28e0d66192b1442d907\";\n\nvar _default = function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoading: true\n    };\n\n    _this.getWeather = function _callee(latitude, longitude) {\n      var _await$axios$get, _await$axios$get$data, temp, weather;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"http://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&APPID=\" + API_KEY + \"&units=metric\"));\n\n            case 2:\n              _await$axios$get = _context.sent;\n              _await$axios$get$data = _await$axios$get.data;\n              temp = _await$axios$get$data.main.temp;\n              weather = _await$axios$get$data.weather;\n\n              _this.setState({\n                isLoading: false,\n                condition: weather[0].main,\n                temp: temp\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.getLocation = function _callee2() {\n      var _await$Location$getCu, _await$Location$getCu2, latitude, longitude;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 3:\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n            case 5:\n              _await$Location$getCu = _context2.sent;\n              _await$Location$getCu2 = _await$Location$getCu.coords;\n              latitude = _await$Location$getCu2.latitude;\n              longitude = _await$Location$getCu2.longitude;\n\n              _this.getWeather(latitude, longitude);\n\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](0);\n              Alert.alert(\"Can't find you.\", \"So sad\");\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getLocation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          temp = _this$state.temp,\n          condition = _this$state.condition;\n      return isLoading ? React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }) : React.createElement(Weather, {\n        temp: Math.round(temp),\n        condition: condition,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/ysh/Documents/Study/Nomad/get-weather/App.js"],"names":["React","Loading","Location","axios","Weather","API_KEY","state","isLoading","getWeather","latitude","longitude","get","data","temp","main","weather","setState","condition","getLocation","requestPermissionsAsync","getCurrentPositionAsync","coords","Alert","alert","Math","round","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,OAAP;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP;AAEA,IAAMC,OAAO,GAAG,kCAAhB;;;;;;;;;;;;;;;;;UAGEC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE;AADL,K;;UAGRC,U,GAAa,iBAAOC,QAAP,EAAiBC,SAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAMDP,KAAK,CAACQ,GAAN,yDAC8CF,QAD9C,aAC8DC,SAD9D,eACiFL,OADjF,mBANC;;AAAA;AAAA;AAAA,uDAETO,IAFS;AAGCC,cAAAA,IAHD,yBAGPC,IAHO,CAGCD,IAHD;AAIPE,cAAAA,OAJO,yBAIPA,OAJO;;AASX,oBAAKC,QAAL,CAAc;AACZT,gBAAAA,SAAS,EAAE,KADC;AAEZU,gBAAAA,SAAS,EAAEF,OAAO,CAAC,CAAD,CAAP,CAAWD,IAFV;AAGZD,gBAAAA,IAAI,EAAJA;AAHY,eAAd;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAebK,W,GAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEJhB,QAAQ,CAACiB,uBAAT,EAFI;;AAAA;AAAA;AAAA,+CAKAjB,QAAQ,CAACkB,uBAAT,EALA;;AAAA;AAAA;AAAA,6DAIRC,MAJQ;AAIEZ,cAAAA,QAJF,0BAIEA,QAJF;AAIYC,cAAAA,SAJZ,0BAIYA,SAJZ;;AAMV,oBAAKF,UAAL,CAAgBC,QAAhB,EAA0BC,SAA1B;;AANU;AAAA;;AAAA;AAAA;AAAA;AAQVY,cAAAA,KAAK,CAACC,KAAN,CAAY,iBAAZ,EAA+B,QAA/B;;AARU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAWd,6BAAoB;AAClB,WAAKL,WAAL;AACD;;;WACD,kBAAS;AAAA,wBACgC,KAAKZ,KADrC;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYM,IADZ,eACYA,IADZ;AAAA,UACkBI,SADlB,eACkBA,SADlB;AAEP,aAAOV,SAAS,GACd,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc,GAGd,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAEiB,IAAI,CAACC,KAAL,CAAWZ,IAAX,CAAf;AAAiC,QAAA,SAAS,EAAEI,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF;AAKD;;;;EAxC0BjB,KAAK,CAAC0B,S","sourcesContent":["import React from \"react\";\nimport { Alert } from \"react-native\";\nimport Loading from \"./Loading\";\nimport * as Location from \"expo-location\";\nimport axios from \"axios\";\nimport Weather from \"./Weather\";\n\nconst API_KEY = \"f06fda6d39bbf28e0d66192b1442d907\";\n\nexport default class extends React.Component {\n  state = {\n    isLoading: true\n  };\n  getWeather = async (latitude, longitude) => {\n    const {\n      data: {\n        main: { temp },\n        weather\n      }\n    } = await axios.get(\n      `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&APPID=${API_KEY}&units=metric`\n    );\n    this.setState({\n      isLoading: false,\n      condition: weather[0].main,\n      temp\n    });\n  };\n  getLocation = async () => {\n    try {\n      await Location.requestPermissionsAsync();\n      const {\n        coords: { latitude, longitude }\n      } = await Location.getCurrentPositionAsync();\n      this.getWeather(latitude, longitude);\n    } catch (error) {\n      Alert.alert(\"Can't find you.\", \"So sad\");\n    }\n  };\n  componentDidMount() {\n    this.getLocation();\n  }\n  render() {\n    const { isLoading, temp, condition } = this.state;\n    return isLoading ? (\n      <Loading />\n    ) : (\n      <Weather temp={Math.round(temp)} condition={condition} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}